debug: false
management:
  endpoints:
    web:
      exposure:
        include: "*"    # actuator 에 endpoint 에 감추어져 있는 녀석을 모두 활성화시켜줌.

logging:
  level:      # 구체적으로 언급하고 싶은 레벨을 명시한다.
    com.min.bulletinboard: debug    # 루트 패키지에서 발생하는 모든 것을 debug 레벨에서 로그를 보겠다
    org.springframework.web.servlet: debug    # 이 부분은 첫 줄에 debug: false 와 관련이 있다.
    # RequestResponse 로그만 따로 뽑아보는 것  //  해당 리퀘스트리스폰스 로그 어떤 패키지로부터 오는지를 조사해서 알 수 있다. (이 패키지라는 것을 알 수 있다.)
    org.hibernate.type.descriptor.sql.BasicBinder: trace    # jpa 기술을 사용할 때, 쿼리 로그를 디버그 로그로 관찰할 수 있다. 안에 있는 바인딩파라미터는 ? 로 나오고, 실제로 어떤 파라미터가 들어갔는 지는 보이지 않게 된다. 기본적으로. 그 녀석을 관찰할 수 있게 해주는 것.

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/board
    username: chomin
    password: 1234
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    defer-datasource-initialization: true   # springboot 2.4~5 에서 새로 생긴  true : test 용 database 를 생성할 수 있게끔.
    hibernate.ddl-auto: create    # 우리가 만든 entity, jpa 에 관련된 설정들.  자동으로 ddl 문을 만들어 준다.
    show-sql: true                # sql 문장, 쿼리 보여줄까?
    properties:
      hibernate:
        format_sql: true          # 내 전용으로 사용하는 것을 넣을 수 있음. hibernate 만에서 이용하는.  (이 내용은 springboot 가 모르는 내용.)
        default_batch_fetch_size: 100   # 테이블 안에 join 테이블로 가져와야 하는 row 수가 10개 정도 된다하면 쿼리가 10개 만들어질 수도 있는데, 이걸 사용하면 최대 100 개 단위로 벌크로 셀렉트 할 수 있게 해준다.
  h2:
    console:
      enabled: false        # h2 웹 콘솔을 활성화 할거냐? - false
  sql:
    init:
      mode: always          # resources 에 있는 data.sql 을 언제 작동시킬 것인가? - always

---
# yaml 파일은 --- 기준으로 새로운 document 를 만든다.

spring:
  config:
    activate:
      on-profile: testdb
#  datasource:
#    url: jdbc:h2:mem:board;mode=mysql
#    driverClassName: org.h2.Driver
#  sql:
#    init:
#      mode: always
#  test.database.replace: none