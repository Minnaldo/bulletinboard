plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'java'
}

group = 'com.min'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // queryDSL 설정
    implementation 'com.querydsl:querydsl-jpa'      // 원래는 querydsl-jpa:~~~  ~~~에 버전이 들어가야 하는데, line 3번에 spring.dependency-management 가 버전을 관리를 해주기 때문에 생략 가능.
    implementation 'com.querydsl:querydsl-core'      // jpa:~~~  처럼 마지막에 버전이 사용된다면 그 때만 생략 가능.
    implementation 'com.querydsl:querydsl-collections'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa"  // queryDSL JPAAnnotationProcessor 사용 지정
                                                // ${dependencyManagement.~~~~~ : gradle 에 있는 그루비 문법을 이용해서 버전이 자동으로 들어가게끔 한 것이다.
                                                // 35번 라인처럼 버전 생략을 하지 않고 ${dependencyManagement.~~~ 라고 썼냐면, 맨 마지막에 버전이 오는게 아니기 때문에, 생략 불가.  :jpa가 맨마지막으로 붙음.
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"   // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드
}

tasks.named('test') {
    useJUnitPlatform()
}


// QueryDSL 설정부
def generated = 'src/main/generated'

// QueryDSL QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 QueryDSL QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}